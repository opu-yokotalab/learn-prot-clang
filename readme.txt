■ C言語学習支援システムプロトタイプ 簡易マニュアル ver 0.1


□このプロトタイプで出来ること

emacs上でC言語のソースコードをコンパイルして、出力された
エラーメッセージをXMLに変換。その後指定されたCGIへと送信する。

□ファイル構成

[prot_clang]
analysis_client.el エラーメッセージを解析モジュールへ送信する(elisp)
analysis_serv.rb コンパイラ、デバッガ共用のエラーメッセージの解析モジュール(ruby)
compile.sh コンパイルを行うシェルスクリプト
compile_err.txt コンパイルエラーのサンプル
functions.el コンパイル用シェルスクリプト、http通信モジュールの実行(elisp)
http_bridge.rb http通信モジュール(ruby)
readme.txt 説明書みたいな物
run_err.txt 実行エラーのサンプル

[sample_src] C言語サンプルソース
*.c サンプルソース群

[test_cgi] テスト用CGI
functions.js Ajaxもどき用JavaScript
index.html 表示用html
result.txt エラーメッセージ格納用
style.css スタイルシート
test.xsl xmlからxhtmlに変換するXSLTスタイルシート
test_cgi.cgi エラーメッセージの保存、xhtmlの変換を行うCGI

[manual] 使い方や仕様が記述されたマニュアル
*.tex
*.pdf
*.dvi
など


□実行の仕方
1.エラーメッセージ解析モジュールと、http通信モジュールを起動する。
コンソール一つにつきモジュール1つしか起動出来ないので2つのコンソールを用意すること。
(emacs shell上で起動しても構わない)

./analysis_serv.rb
./http_client.rb

2.emacsで拡張用elisp関数を評価する
emacsで、
・analysis_client.el
・functions.el
の2つのelispファイルを読み込み、1つの関数が定義されている括弧の外でC-x C-eで関数を評価できる。

例）
(defun analysis-client ()

…中略…

)□←ここでC-x C-e

詳しくはelispの書籍やWebサイトを参考のこと。

3.対象とするC言語のソースファイルを読み込み、拡張したelispの関数を用いてコンパイルを行う。
この時、対象とするファイルを開いているバッファに切り替えた（カレントバッファにした）状態で
コンパイルを行うこと。

例）ファイルを開いたemacs上で
M-x compile-files

この関数を実行することで、コンパイル、エラーメッセージの解析、テスト用CGIへの送信が完了する。
各項目が正しく実行されたか確認する場合には、モジュールを実行させているコンソールに出力されたログ
を確認すること。


□主な仕様
・解析モジュール (analysis_serv.rb)
このモジュールはソケット通信によるプロセス間通信を用いて実現されている。
通信を行う際は、ポート7120番に接続すること。不都合がある場合はポート番号を変更するとよい。

受け取ったメッセージがコンパイラから物か、デバッガからの物かを判別するために簡易的なプロトコル
を用いてる。

・動作モードの送信
・メッセージの送信
・モジュールが非同期で動作するため、メッセージの送信が完了した事を通知

まず初めに、どのモードで動作させるかをモジュールへと送信する。
mode_compiler コンパイラーのメッセージ
mode_debugger デバッガーのメッセージ

次に改行を送信した後に実際のエラーメッセージを送信する。
送信が完了したら改行に続き"EOF"の3文字を送信する。これがメッセージの送信が完了した事の合図となる。

今回はプロトタイプのためプロトコルを簡易化したが、厳密な動作にはモジュールがその動作を正しく完了したか
などを通知する仕組みが必要となると思われる。


・http_client.rb
このモジュールはソケット通信によるプロセス間通信を用いて実現されている。
通信を行う際は、ポート7300番に接続すること。不都合がある場合はポート番号を変更するとよい。

このモジュールも非同期で動作するため、簡易的なプロトコルを用いている。
解析したメッセージ（xml）の送信が完了したら、解析モジュール (analysis_serv.rb)同様改行に続き"EOF"
の3文字を送信する。

このモジュールでも、モジュールの状態を通知するようなプロトコルが必要になると思われる。